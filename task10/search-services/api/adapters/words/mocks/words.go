// Code generated by MockGen. DO NOT EDIT.
// Source: yadro.com/course/proto/words (interfaces: WordsClient)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/words.go -package mock_words yadro.com/course/proto/words WordsClient
//

// Package mock_words is a generated GoMock package.
package mock_words

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	words "yadro.com/course/proto/words"
)

// MockWordsClient is a mock of WordsClient interface.
type MockWordsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWordsClientMockRecorder
	isgomock struct{}
}

// MockWordsClientMockRecorder is the mock recorder for MockWordsClient.
type MockWordsClientMockRecorder struct {
	mock *MockWordsClient
}

// NewMockWordsClient creates a new mock instance.
func NewMockWordsClient(ctrl *gomock.Controller) *MockWordsClient {
	mock := &MockWordsClient{ctrl: ctrl}
	mock.recorder = &MockWordsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordsClient) EXPECT() *MockWordsClientMockRecorder {
	return m.recorder
}

// Norm mocks base method.
func (m *MockWordsClient) Norm(ctx context.Context, in *words.WordsRequest, opts ...grpc.CallOption) (*words.WordsReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Norm", varargs...)
	ret0, _ := ret[0].(*words.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Norm indicates an expected call of Norm.
func (mr *MockWordsClientMockRecorder) Norm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Norm", reflect.TypeOf((*MockWordsClient)(nil).Norm), varargs...)
}

// Ping mocks base method.
func (m *MockWordsClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockWordsClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWordsClient)(nil).Ping), varargs...)
}
