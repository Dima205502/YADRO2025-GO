// Code generated by MockGen. DO NOT EDIT.
// Source: yadro.com/course/proto/search (interfaces: SearchClient)
//
// Generated by this command:
//
//	mockgen -package mock_search -destination ./mocks/search.go yadro.com/course/proto/search SearchClient
//

// Package mock_search is a generated GoMock package.
package mock_search

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	search "yadro.com/course/proto/search"
)

// MockSearchClient is a mock of SearchClient interface.
type MockSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSearchClientMockRecorder
	isgomock struct{}
}

// MockSearchClientMockRecorder is the mock recorder for MockSearchClient.
type MockSearchClientMockRecorder struct {
	mock *MockSearchClient
}

// NewMockSearchClient creates a new mock instance.
func NewMockSearchClient(ctrl *gomock.Controller) *MockSearchClient {
	mock := &MockSearchClient{ctrl: ctrl}
	mock.recorder = &MockSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchClient) EXPECT() *MockSearchClientMockRecorder {
	return m.recorder
}

// DbSearch mocks base method.
func (m *MockSearchClient) DbSearch(ctx context.Context, in *search.SearchRequest, opts ...grpc.CallOption) (*search.SearchReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DbSearch", varargs...)
	ret0, _ := ret[0].(*search.SearchReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbSearch indicates an expected call of DbSearch.
func (mr *MockSearchClientMockRecorder) DbSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbSearch", reflect.TypeOf((*MockSearchClient)(nil).DbSearch), varargs...)
}

// IndexSearch mocks base method.
func (m *MockSearchClient) IndexSearch(ctx context.Context, in *search.SearchRequest, opts ...grpc.CallOption) (*search.SearchReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexSearch", varargs...)
	ret0, _ := ret[0].(*search.SearchReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexSearch indicates an expected call of IndexSearch.
func (mr *MockSearchClientMockRecorder) IndexSearch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexSearch", reflect.TypeOf((*MockSearchClient)(nil).IndexSearch), varargs...)
}

// Ping mocks base method.
func (m *MockSearchClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockSearchClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSearchClient)(nil).Ping), varargs...)
}
