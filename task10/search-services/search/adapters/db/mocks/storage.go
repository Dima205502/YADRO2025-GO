// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go
//
// Generated by this command:
//
//	mockgen -source ./storage.go -destination=./mocks/storage.go -package=mock_dbops
//

// Package mock_dbops is a generated GoMock package.
package mock_dbops

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBops is a mock of DBops interface.
type MockDBops struct {
	ctrl     *gomock.Controller
	recorder *MockDBopsMockRecorder
	isgomock struct{}
}

// MockDBopsMockRecorder is the mock recorder for MockDBops.
type MockDBopsMockRecorder struct {
	mock *MockDBops
}

// NewMockDBops creates a new mock instance.
func NewMockDBops(ctrl *gomock.Controller) *MockDBops {
	mock := &MockDBops{ctrl: ctrl}
	mock.recorder = &MockDBopsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBops) EXPECT() *MockDBopsMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockDBops) GetContext(arg0 context.Context, arg1 any, arg2 string, arg3 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockDBopsMockRecorder) GetContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockDBops)(nil).GetContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockDBops) SelectContext(arg0 context.Context, arg1 any, arg2 string, arg3 ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockDBopsMockRecorder) SelectContext(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockDBops)(nil).SelectContext), varargs...)
}
