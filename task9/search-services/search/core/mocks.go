// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports.go
//
// Generated by this command:
//
//	mockgen -source ./ports.go -destination=mocks.go -package=core
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSearcher is a mock of Searcher interface.
type MockSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockSearcherMockRecorder
	isgomock struct{}
}

// MockSearcherMockRecorder is the mock recorder for MockSearcher.
type MockSearcherMockRecorder struct {
	mock *MockSearcher
}

// NewMockSearcher creates a new mock instance.
func NewMockSearcher(ctrl *gomock.Controller) *MockSearcher {
	mock := &MockSearcher{ctrl: ctrl}
	mock.recorder = &MockSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearcher) EXPECT() *MockSearcherMockRecorder {
	return m.recorder
}

// DbSearch mocks base method.
func (m *MockSearcher) DbSearch(arg0 context.Context, arg1 int, arg2 string) ([]Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbSearch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbSearch indicates an expected call of DbSearch.
func (mr *MockSearcherMockRecorder) DbSearch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbSearch", reflect.TypeOf((*MockSearcher)(nil).DbSearch), arg0, arg1, arg2)
}

// IndexSearch mocks base method.
func (m *MockSearcher) IndexSearch(arg0 context.Context, arg1 int, arg2 string) ([]Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexSearch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexSearch indicates an expected call of IndexSearch.
func (mr *MockSearcherMockRecorder) IndexSearch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexSearch", reflect.TypeOf((*MockSearcher)(nil).IndexSearch), arg0, arg1, arg2)
}

// MockwordSearcher is a mock of wordSearcher interface.
type MockwordSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockwordSearcherMockRecorder
	isgomock struct{}
}

// MockwordSearcherMockRecorder is the mock recorder for MockwordSearcher.
type MockwordSearcherMockRecorder struct {
	mock *MockwordSearcher
}

// NewMockwordSearcher creates a new mock instance.
func NewMockwordSearcher(ctrl *gomock.Controller) *MockwordSearcher {
	mock := &MockwordSearcher{ctrl: ctrl}
	mock.recorder = &MockwordSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwordSearcher) EXPECT() *MockwordSearcherMockRecorder {
	return m.recorder
}

// GetComics mocks base method.
func (m *MockwordSearcher) GetComics(arg0 context.Context, arg1 int) (Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComics", arg0, arg1)
	ret0, _ := ret[0].(Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComics indicates an expected call of GetComics.
func (mr *MockwordSearcherMockRecorder) GetComics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComics", reflect.TypeOf((*MockwordSearcher)(nil).GetComics), arg0, arg1)
}

// SearchByWord mocks base method.
func (m *MockwordSearcher) SearchByWord(arg0 context.Context, arg1 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByWord", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByWord indicates an expected call of SearchByWord.
func (mr *MockwordSearcherMockRecorder) SearchByWord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByWord", reflect.TypeOf((*MockwordSearcher)(nil).SearchByWord), arg0, arg1)
}

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
	isgomock struct{}
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// GetComics mocks base method.
func (m *MockIndex) GetComics(arg0 context.Context, arg1 int) (Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComics", arg0, arg1)
	ret0, _ := ret[0].(Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComics indicates an expected call of GetComics.
func (mr *MockIndexMockRecorder) GetComics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComics", reflect.TypeOf((*MockIndex)(nil).GetComics), arg0, arg1)
}

// SearchByWord mocks base method.
func (m *MockIndex) SearchByWord(arg0 context.Context, arg1 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByWord", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByWord indicates an expected call of SearchByWord.
func (mr *MockIndexMockRecorder) SearchByWord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByWord", reflect.TypeOf((*MockIndex)(nil).SearchByWord), arg0, arg1)
}

// Start mocks base method.
func (m *MockIndex) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockIndexMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIndex)(nil).Start), arg0)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetComics mocks base method.
func (m *MockDB) GetComics(arg0 context.Context, arg1 int) (Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComics", arg0, arg1)
	ret0, _ := ret[0].(Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComics indicates an expected call of GetComics.
func (mr *MockDBMockRecorder) GetComics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComics", reflect.TypeOf((*MockDB)(nil).GetComics), arg0, arg1)
}

// SearchByWord mocks base method.
func (m *MockDB) SearchByWord(arg0 context.Context, arg1 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByWord", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByWord indicates an expected call of SearchByWord.
func (mr *MockDBMockRecorder) SearchByWord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByWord", reflect.TypeOf((*MockDB)(nil).SearchByWord), arg0, arg1)
}

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// FetchComics mocks base method.
func (m *MockFetcher) FetchComics(arg0 context.Context, arg1 int) (Comics, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchComics", arg0, arg1)
	ret0, _ := ret[0].(Comics)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchComics indicates an expected call of FetchComics.
func (mr *MockFetcherMockRecorder) FetchComics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchComics", reflect.TypeOf((*MockFetcher)(nil).FetchComics), arg0, arg1)
}

// GetMaxID mocks base method.
func (m *MockFetcher) GetMaxID(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxID indicates an expected call of GetMaxID.
func (mr *MockFetcherMockRecorder) GetMaxID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxID", reflect.TypeOf((*MockFetcher)(nil).GetMaxID), arg0)
}

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// BuildIndex mocks base method.
func (m *MockBuilder) BuildIndex(arg0 context.Context) (map[string][]int, map[int]Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildIndex", arg0)
	ret0, _ := ret[0].(map[string][]int)
	ret1, _ := ret[1].(map[int]Comics)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildIndex indicates an expected call of BuildIndex.
func (mr *MockBuilderMockRecorder) BuildIndex(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildIndex", reflect.TypeOf((*MockBuilder)(nil).BuildIndex), arg0)
}

// MockWords is a mock of Words interface.
type MockWords struct {
	ctrl     *gomock.Controller
	recorder *MockWordsMockRecorder
	isgomock struct{}
}

// MockWordsMockRecorder is the mock recorder for MockWords.
type MockWordsMockRecorder struct {
	mock *MockWords
}

// NewMockWords creates a new mock instance.
func NewMockWords(ctrl *gomock.Controller) *MockWords {
	mock := &MockWords{ctrl: ctrl}
	mock.recorder = &MockWordsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWords) EXPECT() *MockWordsMockRecorder {
	return m.recorder
}

// Norm mocks base method.
func (m *MockWords) Norm(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Norm", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Norm indicates an expected call of Norm.
func (mr *MockWordsMockRecorder) Norm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Norm", reflect.TypeOf((*MockWords)(nil).Norm), arg0, arg1)
}
